<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seckill.demo.demo.mapper.ZOrderMapper">
  <resultMap id="BaseResultMap" type="com.seckill.demo.demo.entry.ZOrder">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="member_id" jdbcType="INTEGER" property="memberId" />
    <result column="member_name" jdbcType="VARCHAR" property="memberName" />
    <result column="num" jdbcType="CHAR" property="num" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="add_time" jdbcType="INTEGER" property="addTime" />
    <result column="can_time" jdbcType="INTEGER" property="canTime" />
    <result column="price" jdbcType="DECIMAL" property="price" />
    <result column="goods_id" jdbcType="INTEGER" property="goodsId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, member_id, member_name, num, state, add_time, can_time, price, goods_id
  </sql>
  <select id="selectByCriteria" parameterType="com.seckill.demo.demo.entry.ZOrderCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from z_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from z_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from z_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByCriteria" parameterType="com.seckill.demo.demo.entry.ZOrderCriteria">
    delete from z_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.seckill.demo.demo.entry.ZOrder">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into z_order (member_id, member_name, num, 
      state, add_time, can_time, 
      price, goods_id)
    values (#{memberId,jdbcType=INTEGER}, #{memberName,jdbcType=VARCHAR}, #{num,jdbcType=CHAR}, 
      #{state,jdbcType=TINYINT}, #{addTime,jdbcType=INTEGER}, #{canTime,jdbcType=INTEGER}, 
      #{price,jdbcType=DECIMAL}, #{goodsId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.seckill.demo.demo.entry.ZOrder">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into z_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        member_id,
      </if>
      <if test="memberName != null">
        member_name,
      </if>
      <if test="num != null">
        num,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="addTime != null">
        add_time,
      </if>
      <if test="canTime != null">
        can_time,
      </if>
      <if test="price != null">
        price,
      </if>
      <if test="goodsId != null">
        goods_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="memberId != null">
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="memberName != null">
        #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="num != null">
        #{num,jdbcType=CHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="addTime != null">
        #{addTime,jdbcType=INTEGER},
      </if>
      <if test="canTime != null">
        #{canTime,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        #{price,jdbcType=DECIMAL},
      </if>
      <if test="goodsId != null">
        #{goodsId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByCriteria" parameterType="com.seckill.demo.demo.entry.ZOrderCriteria" resultType="java.lang.Long">
    select count(*) from z_order
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByCriteriaSelective" parameterType="map">
    update z_order
    <set>
      <if test="record.id != null">
        
      </if>
      <if test="record.memberId != null">
        member_id = #{record.memberId,jdbcType=INTEGER},
      </if>
      <if test="record.memberName != null">
        member_name = #{record.memberName,jdbcType=VARCHAR},
      </if>
      <if test="record.num != null">
        num = #{record.num,jdbcType=CHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=TINYINT},
      </if>
      <if test="record.addTime != null">
        add_time = #{record.addTime,jdbcType=INTEGER},
      </if>
      <if test="record.canTime != null">
        can_time = #{record.canTime,jdbcType=INTEGER},
      </if>
      <if test="record.price != null">
        price = #{record.price,jdbcType=DECIMAL},
      </if>
      <if test="record.goodsId != null">
        goods_id = #{record.goodsId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByCriteria" parameterType="map">
    update z_order
    set 
      member_id = #{record.memberId,jdbcType=INTEGER},
      member_name = #{record.memberName,jdbcType=VARCHAR},
      num = #{record.num,jdbcType=CHAR},
      state = #{record.state,jdbcType=TINYINT},
      add_time = #{record.addTime,jdbcType=INTEGER},
      can_time = #{record.canTime,jdbcType=INTEGER},
      price = #{record.price,jdbcType=DECIMAL},
      goods_id = #{record.goodsId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.seckill.demo.demo.entry.ZOrder">
    update z_order
    <set>
      <if test="memberId != null">
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="memberName != null">
        member_name = #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="num != null">
        num = #{num,jdbcType=CHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="addTime != null">
        add_time = #{addTime,jdbcType=INTEGER},
      </if>
      <if test="canTime != null">
        can_time = #{canTime,jdbcType=INTEGER},
      </if>
      <if test="price != null">
        price = #{price,jdbcType=DECIMAL},
      </if>
      <if test="goodsId != null">
        goods_id = #{goodsId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.seckill.demo.demo.entry.ZOrder">
    update z_order
    set member_id = #{memberId,jdbcType=INTEGER},
      member_name = #{memberName,jdbcType=VARCHAR},
      num = #{num,jdbcType=CHAR},
      state = #{state,jdbcType=TINYINT},
      add_time = #{addTime,jdbcType=INTEGER},
      can_time = #{canTime,jdbcType=INTEGER},
      price = #{price,jdbcType=DECIMAL},
      goods_id = #{goodsId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <insert id="insertBatch" parameterType="com.seckill.demo.demo.entry.ZOrder">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into z_order (member_id, 
      member_name, num, state, 
      add_time, can_time, price, 
      goods_id)
    values <foreach collection="list" item="item" index="index" separator="," > (#{item.memberId,jdbcType=INTEGER}, 
      #{item.memberName,jdbcType=VARCHAR}, #{item.num,jdbcType=CHAR}, #{item.state,jdbcType=TINYINT}, 
      #{item.addTime,jdbcType=INTEGER}, #{item.canTime,jdbcType=INTEGER}, #{item.price,jdbcType=DECIMAL}, 
      #{item.goodsId,jdbcType=INTEGER})</foreach>
  </insert>
</mapper>